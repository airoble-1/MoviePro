// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading: 
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Movie {
    id              Int               @id @default(autoincrement())
    createdAt       DateTime          @default(now())
    updatedAt       DateTime          @updatedAt
    movieId         Int
    title           String
    tagLine         String
    overview        String
    runtime         Int
    releaseDate     DateTime
    rating          MovieRating
    voteAverage     Float
    poster          Bytes[]
    posterType      String
    backdrop        Bytes[]
    backdropType    String
    trailerUrl      String
    MovieCollection MovieCollection[]
    MovieCast       MovieCast[]
    MovieCrew       MovieCrew[]
}

model Collection {
    id               Int               @id @default(autoincrement())
    createdAt        DateTime          @default(now())
    updatedAt        DateTime          @updatedAt
    name             String
    description      String
    MovieCollections MovieCollection[]
}

model MovieCollection {
    id           Int        @id @default(autoincrement())
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt
    collection   Collection @relation(fields: [collectionId], references: [id])
    collectionId Int
    movie        Movie      @relation(fields: [movieId], references: [id])
    movieId      Int
    order        Int
}

model MovieCast {
    id         Int      @id @default(autoincrement())
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    movie      Movie    @relation(fields: [movieId], references: [id])
    movieId    Int
    castId     Int
    department String
    name       String
    character  String
    imageUrl   String
}

model MovieCrew {
    id         Int      @id @default(autoincrement())
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    movie      Movie    @relation(fields: [movieId], references: [id])
    movieId    Int
    crewId     Int
    department String
    name       String
    job        String
    imageUrl   String
}

enum MovieRating {
    G
    PG
    PG13
    R
    NC17
    NR
}

// model Example {
//     id String @id @default(cuid())
// }

// Necessary for Next auth
// model Account {
//     id                String  @id @default(cuid())
//     userId            String
//     type              String
//     provider          String
//     providerAccountId String
//     refresh_token     String? // @db.Text
//     access_token      String? // @db.Text
//     expires_at        Int?
//     token_type        String?
//     scope             String?
//     id_token          String? // @db.Text
//     session_state     String?
//     user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

//     @@unique([provider, providerAccountId])
// }

// model Session {
//     id           String   @id @default(cuid())
//     sessionToken String   @unique
//     userId       String
//     expires      DateTime
//     user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

// model User {
//     id            String    @id @default(cuid())
//     name          String?
//     email         String?   @unique
//     emailVerified DateTime?
//     image         String?
// accounts      Account[]
// sessions      Session[]
// }

// model VerificationToken {
//     identifier String
//     token      String   @unique
//     expires    DateTime

//     @@unique([identifier, token])
// }
